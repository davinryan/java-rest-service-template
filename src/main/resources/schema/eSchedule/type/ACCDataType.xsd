<?xml version="1.0" encoding="UTF-8"?>
<!-- 
Defines the global data types that can be used with ACC schemas.
Only data types that are unchangeable across ACC should be defined.
The Database standards do NOT allow standard data types to be defined.   (See paper 'User Defined Data Types'

The schema was created on 28 August 2003 (effective 1 September 2003) to enable datatypes to be defined for XML schemas and sub schemas. 
See document XML Schema Reuse.

The main purpose of the data type is to be able to define standard patterns for certain simple elements used within the schemas.
A change in eForm required that certain elements are defined using upper case only. 
Those elements have been set up as data types to ensure the rules are not changed without good reason.
The valid values for Vendor Id, Contract Id, Claim Number, Provider Id, and Service Code are upper case A-Z, 0-9 and a space.
(there is no enforcement that any of the elements have to be fixed size)

Other changes that were pending for eForm at the time were also applied to this schema.

A minor change was made on 8 September 2003 to set LevyPayerACCIdentifier to a fixed length 8 after a problem by Stoyan where the parser as giving an error on this element even though it is not used by eForm. The datatype namespace was also changed from xmlns:xmldt to xmlns:accdt as XMLSpy objects (treats the xml as reserved word).

A minor change was made on 4 November 2003 to set ContractACCIdentifier & VendorACCIdentifier to allow uppercase charactors only (i.e. any chatacter not a-z).

A minor change was made on 20 February 2006 to remove attribute xmlns:xmldt="http://xmlschema.acc.co.nz/"

A minor change was made during 2012 to increase MFPApprovalReferenceNumber to 7 chrs
-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified" version="2.0">

	<!-- -->
	<!--The ACC Data Type is a way of defining the standard data items for ACC in such a way as to be global in their definition and usage.  Specific data items for ACC data attibutes may be defined in this schema so that they can be re-used by all future XML Schemas ensuring that the definition of such data items is consistent across the ACC along with their pattern validations.-->
	<!-- -->
	<xsd:simpleType name="MedicalFeesNumber">
		<xsd:annotation>
			<xsd:documentation>Varchar 12 pattern [A-Z0-9 ]</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="1"/>
			<xsd:maxLength value="12"/>
			<xsd:pattern value="[A-Z0-9 ]*"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="ContractACCIdentifier">
		<xsd:annotation>
			<xsd:documentation>Varchar 8   pattern [^a-z]</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:maxLength value="8"/>
			<xsd:minLength value="1"/>
			<xsd:pattern value="[^a-z]*"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="LevyPayerACCIdentifier">
		<xsd:annotation>
			<xsd:documentation>Varchar 8   pattern [A-Z]/d7   eg  Annnnnnn</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:length value="8"/>
			<xsd:pattern value="(A-Z)/d(7)"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="MFPApprovalReferenceNumber">
		<xsd:annotation>
			<xsd:documentation>Varchar 7 pattern [A-Z0-9 ]</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="0"/>
			<xsd:maxLength value="7"/>
			<xsd:pattern value="[A-Z0-9 ]*"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="ProviderACCIdentifier">
		<xsd:annotation>
			<xsd:appinfo>The provider identifier is defined as varchar 8. The format is a little vague. Most appear to be one alpha followed by 5 numeric but there are instances of two alpha or  two alpha four numeric.   There are also some numerics only.
What sort of pattern could be used for validity?</xsd:appinfo>
			<xsd:documentation>Varchar 8   pattern [A-Z0-9 ]</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:maxLength value="8"/>
			<xsd:minLength value="0"/>
			<xsd:pattern value="[A-Z0-9 ]*"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="VendorACCIdentifier">
		<xsd:annotation>
			<xsd:appinfo/>
			<xsd:documentation>Varchar12  pattern [^a-z]</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:maxLength value="12"/>
			<xsd:minLength value="1"/>
			<xsd:pattern value="[^a-z]*"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="MFPServiceItemCode">
		<xsd:annotation>
			<xsd:documentation>Varchar10  pattern [A-Z0-9 ]</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:minLength value="1"/>
			<xsd:maxLength value="10"/>
			<xsd:pattern value="[A-Z0-9 ]*"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:element name="ACCDataType">
		<xsd:annotation>
			<xsd:documentation>Define global data types forACC (datatype could be defined by project/application)</xsd:documentation>
			<xsd:appinfo>This element exists onlty to enable XMLSpy to work properly. 
Whether the data types are defined at ACC or project level needs to be reviewed. If they are defined at ACC level this definition schema could get very large. If they are defined at project/application level this definition schema could duplicate entries as missing one in a project directory could create another one and leaves the potential to have a same named data type with two different facet specifications.</xsd:appinfo>
		</xsd:annotation>
	</xsd:element>
</xsd:schema>
